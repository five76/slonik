Кортежи
~~~~~~

Кортежи (**tuple**) — это неизменяемый тип данных в Python, который используется для хранения упорядоченной последовательности элементов.

Кортежи представляют собой простые группы объектов. Они действуют точно так же, как списки, за исключением того, что не допускают непосредственного изменения (они являются неизменяемыми) и в литеральной форме записываются как последовательность элементов в **круглых**, а не в квадратных скобках.

Так как кортежей являются неизменяемыми коллекциями, то они обеспечивают поддержку целостности. Кортеж не будет изменен посредством другой ссылки из другого места в программе, чего нельзя сказать о списках. Существуют ситуации, в которых кортежи можно использовать, а списки – нет. Например, в качестве ключей словаря. Некоторые встроенные операции также могут требовать или предполагать использование кортежей, а не списков. 

.. important:: Списки должны выбираться, когда требуются упорядоченные коллекции, которые можно изменить. Кортежи могут использоваться в остальных случаях, когда необходимы фиксированные ассоциации объектов.

Кортеж поддерживают практически все операции над списками.

**Примеры кортежей**

.. code:: Python

        # Кортеж из строк
        fruits_tuple = ('яблоко', 'банан', 'апельсин')

        # Кортеж из логических значений
        my_tuple = (True, False, True)

        # Кортеж из других кортежей
        nested_tuple = ((1, 3), ('a', 'b'))

        # Кортеж из списков
        my_tuple = ([1, 2, 3], ['a', 'b', 'c'])

        # Кортеж из словарей
        my_tuple = ({'name': 'Mike', 'age': 18}, {'name': 'Anna', 'age': 21})

        # Кортеж из разных типов данных
        mixed_tuple = (1, 'hello', [1, 2, 3], {'a': 10})

Создание кортежей
``````````````````

С помощью скобок:

fruits_tuple = ('яблоко', 'банан', 'апельсин')

C помощью перечисления:

fruits_tuple = 'яблоко', 'банан', 'апельсин'

Из итерируемого элемента с помощью функции tuple():

my_tuple_string = tuple('Jupyter')

my_tuple_list = tuple([1,2,3,4])

Пустой кортеж:

empty_tuple = ()









Отображения – это коллекции объектов, доступ к которым осуществляется не по определенным смещениям от начала коллекции (индексам), а по ключам. В действительности отображения вообще не подразумевают какого-либо упорядочения элементов по их позиции, они просто отображают ключи на связанные с ними значения. Словари – единственный тип отображения в наборе базовых объектов Python – также относятся к классу изменяемых объектов: они могут изменяться непосредственно и в случае необходимости могут увеличиваться и уменьшаться в размерах подобно спискам.

**Словарь** в Python является **неупорядоченной изменяемой** коллекцией, в которой доступ к элементам происходит по ключу. Ключ может принимать значения любого 
неизменяемого типа – **int, float, str, tuple**. Данные в словаре хранятся в формате *ключ – значение*.

В жизни примерами словарей являются структуры данных:

- Телефонный справочник. В нем ключом является имя, а значением — номер телефона. 
- Маршруты поездов или авиарейсы, идентифицируются численно-буквенным кодом.

Примеры словарей:

{'country': 'Russia'}

'country' - ключ
'Russia' - значение

{1 : 'Строки', 2 : 'Списки', 3: 'Словари'}

.. code:: python

   london = {'name': 'London1', 
   'location': 'London Str', 
   'vendor': 'Cisco'}

Словари заключены в **фигурные скобки {}**

Ключи являются уникальными, повторяться они не могут. Если данному ключу ставится в соответствие другое значение, старое удаляется.

Элементы словаря разделены запятыми.

Создание словаря
`````````````````

**С помощью литерала**

products = {1: 'овощи', 2: 'фрукты', 3: 'молочные продукты'} 

books = {'Достоевский': ['Идиот', 'Бесы', 'Бедные люди'], 'Тургенев': ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']}

**Конструктор**

phone_numbers = dict()

dict.fromkeys
``````````````
Когда надо создать словарь с известными ключами, но неизвестными или одинаковыми значениями :

.. code:: python

   d_keys = ['host', 'location', 'ip', 'mac']
   serv = dict.fromkeys(d_keys)
   print(serv)

   {'host': None, 'location': None, 'ip': None, 'mac': None}


Добавление элемента в словарь
```````````````````````````````

.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   print(phone_numbers)

   {'Иванов': '89882563698', 'Петров': '89882585656'}

Ключ элемента указывается в квадратных скобках, значение - после знака присваивания.

В словаре хранится последнее присвоенное значение по ключу:

.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   phone_numbers['Иванов'] = 'unknown'
   print(phone_numbers)

   {'Иванов': 'unknown', 'Петров': '89882585656'}


Получение значения из словаря
````````````````````````````````
.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   # Получить значение
   print(phone_number['Петров'])
   
   89882585656



.. code:: python

   books = {'Достоевский': ['Идиот', 'Бесы', 'Бедные люди'], 
             'Тургенев': ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']}
   # Напечатать все книги Тургенева
   print(books['Тургенев'])
   # Напечать первую в списке книжку Тургенева
   print(books['Тургенев'][0])

   ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']
   Отцы и дети

Удаление элемента
```````````````````
**del**

.. code:: python

   del  phone_numbers['Иванов']

.. toctree::
   :maxdepth: 1
   :hidden:

   dict_methods
   dict_examples
