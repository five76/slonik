Снимки данных
####################

PostgreSQL предоставляет разработчикам богатый набор средств для управления конкурентным доступом к данным. 
Внутри он поддерживает целостность данных, реализуя модель **MVCC** (*Multiversion Concurrency Control*, Многоверсионное управление конкурентным доступом). 
Это означает, что каждый SQL-оператор видит *снимок данных* (версию базы данных) на определённый момент времени, 
вне зависимости от текущего состояния данных. Это защищает операторы от несогласованности данных, возможной, если другие конкурирующие транзакции внесут 
изменения в те же строки данных, и обеспечивает тем самым изоляцию транзакций для каждого сеанса баз данных. MVCC, отходя от методик блокирования, 
принятых в традиционных СУБД, снижает уровень конфликтов блокировок и таким образом обеспечивает более высокую производительность в многопользовательской среде.

Данные таблиц хранятся в файлах, каждый из которых разбит на страницы по 8 Кб. В свою очередь на каждой странице может содержаться несколько версий одной и той же строки.
Для того чтобы транзакции могли определить, с какой именно версией им необходимо работать исползуется **снимок данных**, который определяет, 
какие версии должны быть видны, а какие — нет, чтобы обеспечить согласованную картину данных на определенный момент времени. В снимке данных видны только 
зафиксированные на момент построения этого снимка данных версии строк.

Это полностью исключает аномалию грязного чтения на любом  уровне изоляции.

На уровне изоляции **Read Committed** снимок создается **в начале каждого оператора** транзакции. 
Такой снимок активен, пока выполняется оператор. 

.. figure:: img/03_snapshot_01.png
       :scale: 100 %
       :align: center
       :alt: asda

На уровнях **Repeatable Read** и **Serializable** снимок создается один раз **в начале первого оператора транзакции**. 
Такой снимок остается активным до самого конца транзакции.

.. figure:: img/03_snapshot_02.png
       :scale: 100 %
       :align: center
       :alt: asda
	   
Видимость строк
***************

Из всего многообразия версий строк выбрать те, которые необходимы в данный момнент. Для этого нужно правила, которые называются  *правила видимости*. 
За это отвечают два параметра в заголовке строки: **xmin** и **xmax**

Версия строки видна, когда в снимке видны изменения, сделанные транзакцией *xmin* (транзакция зафиксирована), и не видны изменения, 
сделанные транзакцией *xmax* (версия строки появилась, но еще не видно, что она удалена или изменена).

Каждая транзакция видит изменения, сделанные ей самой еще до фиксации.

.. figure:: img/03_snapshot_03.png
       :scale: 100 %
       :align: center
       :alt: asda
	   
На данном рисунке:

- изменения транзакции 2 будут видны, потому что она завершились до создания снимка,

- изменения транзакции 1 не будут видны, потому что она была активна на момент создания снимка. Она началась до создания снимка и в 
момент его создания работала. В ней что-то происходило, возможно, были ROLLBACK-и. Поэтому изменения внурти нее просто игнорируются.

- изменения транзакции 3 не будут видны, потому что она начались позже создания снимка (ее статус не важен).

Момент (время) фиксации транзакций неизвестен системе. Известен только момент ее начала (он определяется номером транзакции и отмечен на рисунках пунктирной линией), 
но факт завершения нигде не записывается.

Можно лишь узнать текущий статус транзакций при создании снимка. То есть после фиксации уже нет возможности выяснить, какая традиция была активна в момент создания снимка.
Эта информация есть в общей памяти сервера в структуре *ProcArray,* которая содержит список всех активных сеансов и их транзакций.
Поэтому список всех текущих активных транзакций приходится запоминать в снимке.

В PostgreSQL нельзя создать снимок, показывающий согласованные данные в прошлом (например, минут назад), 
даже если все необходимые для этого версии строк существуют в табличных страницах. 

Снимок **не является физической копией** всех необходимых версий строк. Он задается несколькими числами:

- **xmin** — нижняя граница снимка, в качестве которой выступает номер самой ранней активной транзакции.
Все транзакции с меньшими номерами либо зафиксированы, и тогда их изменения безусловно видны в снимке, либо отменены, и тогда изменения игнорируются. 

- **xmax** — верхняя граница снимка, в качестве которой берется номер, *следующий* за номером **последней зафиксированной** транзакции. 
Верхняя граница определяет момент, в который был сделан снимок, который задается увеличивающимися номерами транзакций.
Все транзакции с номерами, большими или равными xmax, в момент создания снимка заведомо не были зафиксированы — они либо были активны, либо 
отменены, либо еще не начались;

- **xip_list** (*xid-in-progress list*) — список активных транзакций. Этот список используется для того, чтобы не учитывать в снимке изменения транзакций, 
которые уже завершились, но в момент создания снимка еще были активны.


.. figure:: img/03_snapshot_04.png
       :scale: 100 %
       :align: center
       :alt: asda


Пример:
=======

1. Перейти в БД bank_rc и опустощить таблицу accounts:

::
	
	\c bank_rc
	TRUNCATE accounts;
	
2. Начать три транзакции, в каждой из которых добавить одну строку:

- первая добавлена транзакцией, которая началась до создания снимка (T1), но завершилась позже,

- вторая добавлена транзакцией, которая началась и завершилась до создания снимка (T2),

- третья была добавлена уже после создания снимка (T3).

.. figure:: img/03_snapshot_05.png
       :scale: 100 %
       :align: center
       :alt: asda

.. figure:: img/03_snapshot_06.png
       :scale: 100 %
       :align: center
       :alt: asda


PostgreSQL понимает это следующим образом:

Для просмотра текущего снимка данных транзакции есть специальная функция: **txid_current_snapshot**.

3. В  третьем сеансе выполнить функцию:

::

	SELECT txid_current_snapshot();

.. figure:: img/03_snapshot_07.png
       :scale: 100 %
       :align: center
       :alt: asda

Здесь через двоеточие перечислены *snapshot.xmin*, *snapshot.xmax* и *snapshot.xip* (в данном случае один номер, но в общем — список).

По сформулированным выше правилам, в снимке должны быть видны изменения, сделанные транзакциями с номерами 

**snapshot.xmin <= xid < snapshot.xmax**

и не попавших в список snapshot.xip. 

4. В первом сеансе вывести все строки таблицы:

::

	SELECT xmin, xmax, * FROM accounts ORDER BY id;


.. figure:: img/03_snapshot_08.png
       :scale: 100 %
       :align: center
       :alt: asda
	   
- Первая строка не видна — она создана транзакцией, которая входит в список активных (xip).

- Вторая строка видна — она создана транзакцией, которая попадает в диапазон снимка.

- Третья строка не видна — она создана транзакцией, которая не входит в диапазон снимка.

5. Завершить транзакцию в третьем сеансе.

