Базы данных и схемы
###################

Кластер
*******

Каждый работающий экземпляр сервера обслуживает несколько баз данных. Этот набор называется кластером.
С точки зрения файловой системы кластер баз данных представляет собой один каталог, 
в котором будут храниться все данные. Он называется каталогом данных или областью данных. 
Администратор может сам выбирать место для хранения данных, но часто данные размещаются в 
**/usr/local/pgsql/data** или в **/var/lib/pgsql/data**. 
Прежде чем с каталогом данных можно будет работать, его нужно инициализировать, 
используя программу **initdb**, которая устанавливается в составе PostgreSQL.

https://postgrespro.ru/docs/postgresql/16/creating-cluster

При инициализации нового кластера всегда создаются три одинаковых базы данных **template0**, **template1**, **postgres**.

- **template0** используется, например, для восстановления из логической резервной копии или для создания базы в другой кодировке и **никогда не должна меняться**;

- **template1** служит шаблоном для всех остальных баз данных, которые может создать пользователь в этом кластере;

- **postgres** представляет собой обычную базу данных, которую можно использовать по своему усмотрению.

Первая база данных всегда создаётся командой **initdb** при инициализации пространства хранения данных. 
Эта база данных называется **postgres**. Далее для создания первой «обычной» базы данных можно подключиться к postgres.

При каждом создании новой базы данных командой **CREATE DATABASE** в рамках кластера производится клонирование шаблона **template1**. 
При этом любые изменения, сделанные в **template1**, распространяются на все созданные впоследствии базы данных.

::

	CREATE DATABASE my_db;
	
.. figure:: img/do_01_createdb.png
       :scale: 100 %
       :align: center
       :alt: asda

.. important:: CREATE DATABASE не копирует права GRANT уровня базы из исходной БД. 
				Новая база получает права уровня базы по умолчанию.


Вторая системная база template0. При инициализации она содержит те же самые объекты, что и template1, 
предопределённые в рамках устанавливаемой версии PostgreSQL. 
В template0 **не следует вносить никакие изменения** после инициализации кластера. 
Если в команде CREATE DATABASE указать в качестве шаблона template0 вместо template1, 
то можно получить «чистую» пользовательскую базу данных (в которой никаких пользовательских объектов нет, 
есть только системные объекты в первозданном виде), не содержащую ничего, что могло быть добавлено на месте в template1. 
Это особенно полезно при восстановлении дампа pg_dump: скрипт выгруженного дампа должен восстанавливаться в чистую базу, 
чтобы он мог воссоздать нужное содержимое базы, избежав конфликтов с объектами, которые могли быть добавлены в template1.




Другая причина, для копирования template0 вместо template1 заключается в том, 
что можно указать новые параметры локали и кодировку при копировании template0, 
в то время как для копий template1 они не должны меняться. Это связано с тем, что template1 
может содержать данные в специфических кодировках и локалях, в отличие от template0.

Практика:

1. Вывод списка баз данных кластера:

::

	\l

.. figure:: img/do_01_listdb.png
       :scale: 100 %
       :align: center
       :alt: asda

2. Просмотр списка баз данных с помощью SQL в таблице системного каталога

::

	SELECT datname, datistemplate, datallowconn, datconnlimit FROM pg_database;

.. figure:: img/do_01_listdb2.png
       :scale: 100 %
       :align: center
       :alt: asda

В таблице pg_database есть два полезных флага для каждой базы данных: 
столбцы **datistemplate** и **datallowconn**. 

- *datistemplate* указывает на факт того, что база данных может выступать в качестве шаблона в команде CREATE DATABASE. Если флаг установлен, то для пользователей с правом CREATEDB клонирование доступно; если флаг не установлен, 
то лишь суперпользователь и владелец базы данных могут её клонировать. 

- *datallowconn* если не установлен, то новые подключения к этой базе не допустимы (однако текущие сеансы не закрываются при сбросе этого флага). 

База template0 обычно помечена как *datallowconn = false* для избежания любых её модификаций.

.. important:: И template0, и template1 всегда должны быть помечены флагом datistemplate = true.


3. Проверить наличие функции **digest** в базе данных my_db:

.. note:: Функция **digest** вычисляет двоичный хэш входных данных с помощью алгоритма, указанного в типе. 
		  Эта функция поддерживает широкий спектр алгоритмов, включая md5, sha1 и семейство SHA-2 
		  (sha224, sha256, sha384, sha512), а также любой другой алгоритм вычисления дайджеста, поддерживаемый базовой библиотекой OpenSSL.

::

	\c my_db
	SELECT digest('Hello, world!', 'md5');

.. figure:: img/do_01_digest.png
       :scale: 100 %
       :align: center
       :alt: asda

Данная функция доступна при установке пакета **pgcrypto**, который предоставляет функции для создания односторонних хэшей, 
необходимых для проверки целостности данных и безопасного сравнения данных без раскрытия исходного содержимого.

Данный пакет отсутствует по-умолчанию в шаблоне template1, а, следовательно, и во всех базах данных, созданных на его основе.

4. Установить пакет pgcrypto в template1:

4.1) Установить **Contrib** — это дополнительные модули для PostgreSQL, которые поставляются в составе исходного дистрибутива, 
но по умолчанию не активированы. Они предоставляются в виде модулей расширения или дополнительных клиентских или серверных приложений. 

::

	\q
	sudo apt-get install postgresql16-contrib
	
4.2) Установить пакет pgcrypto в template1:

::

	psql -U postgres
	\c template1
	CREATE EXTENSION pgcrypto;
	\c postgres

4.3) Удалить базу данных **my_db** и создать новую:

::

	DROP DATABASE my_db;
	CREATE DATABASE my_db;
	\c my_db
	SELECT digest('Hello, world!', 'md5');

.. figure:: img/do_01_digest2.png
       :scale: 100 %
       :align: center
       :alt: asda


ALTER DATABASE
----------------

Для изменения атрубутов базы данных используется оператор ALTER DATABASE, который является расширением PostgreSQL.

https://postgrespro.ru/docs/postgresql/17/sql-alterdatabase

Переименование базы данных:

::
	
	\c postgres
	ALTER DATABASE my_db RENAME to appdb;

.. figure:: img/do_01_alter_rename.png
       :scale: 100 %
       :align: center
       :alt: asda
	   

Установить значение параметра work_mem для appdb 16 MB:

::

	ALTER DATABASE my_db SET work_mem='16MB';

Выйти из БД:

::

	\c postgres
	SHOW work_mem;
	
Подключиться к appdb и проверить work_mem:

::

	\c appdb;
	SELECT * FROM pg_settings WHERE name='work_mem' \gx

.. figure:: img/do_01_alter_work_mem.png
       :scale: 100 %
       :align: center
       :alt: asda

Размер базы данных

Размер базы данных можно узнать с помощью функции:

::

	SELECT pg_database_size('appdb');
 
 
.. figure:: img/do_01_sizedb.png
       :scale: 100 %
       :align: center
       :alt: asda
	   
	   
Вывод размера в читаемом виде:

::

	SELECT pg_size_pretty(pg_database_size('appdb'));
	
	
	
.. figure:: img/do_01_sizedb1.png
       :scale: 100 %
       :align: center
       :alt: asda
