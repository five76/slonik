Словари
~~~~~~

Отображения – это коллекции объектов, доступ к которым осуществляется не по определенным смещениям от начала коллекции (индексам), а по ключам. В действительности отображения вообще не подразумевают какого-либо упорядочения элементов по их позиции, они просто отображают ключи на связанные с ними значения. Словари – единственный тип отображения в наборе базовых объектов Python – также относятся к классу изменяемых объектов: они могут изменяться непосредственно и в случае необходимости могут увеличиваться и уменьшаться в размерах подобно спискам.

**Словарь** в Python является **неупорядоченной изменяемой** коллекцией, в которой доступ к элементам происходит по ключу. Ключ может принимать значения любого 
неизменяемого типа – **int, float, str, tuple**. Данные в словаре хранятся в формате *ключ – значение*.

В жизни примерами словарей являются структуры данных:

- Телефонный справочник. В нем ключом является имя, а значением — номер телефона. 
- Маршруты поездов или авиарейсы, идентифицируются численно-буквенным кодом.

Примеры словарей:

{'country': 'Russia'}

'country' - ключ
'Russia' - значение

{1 : 'Строки', 2 : 'Списки', 3: 'Словари'}

.. code:: python

   london = {'name': 'London1', 
   'location': 'London Str', 
   'vendor': 'Cisco'}

Словари заключены в **фигурные скобки {}**

Ключи являются уникальными, повторяться они не могут. Если данному ключу ставится в соответствие другое значение, старое удаляется.

Элементы словаря разделены запятыми.

Создание словаря
`````````````````

**С помощью литерала**

products = {1: 'овощи', 2: 'фрукты', 3: 'молочные продукты'} 

books = {'Достоевский': ['Идиот', 'Бесы', 'Бедные люди'], 'Тургенев': ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']}

**Конструктор**

phone_numbers = dict()

dict.fromkeys
``````````````
Когда надо создать словарь с известными ключами, но неизвестными или одинаковыми значениями :

.. code:: python

   d_keys = ['host', 'location', 'ip', 'mac']
   serv = dict.fromkeys(d_keys)
   print(serv)

   {'host': None, 'location': None, 'ip': None, 'mac': None}


Добавление элемента в словарь
```````````````````````````````

.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   print(phone_numbers)

   {'Иванов': '89882563698', 'Петров': '89882585656'}

Ключ элемента указывается в квадратных скобках, значение - после знака присваивания.

В словаре хранится последнее присвоенное значение по ключу:

.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   phone_numbers['Иванов'] = 'unknown'
   print(phone_numbers)

   {'Иванов': 'unknown', 'Петров': '89882585656'}


Получение значения из словаря
````````````````````````````````
.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   # Получить значение
   print(phone_number['Петров'])
   
   89882585656



.. code:: python

   books = {'Достоевский': ['Идиот', 'Бесы', 'Бедные люди'], 
             'Тургенев': ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']}
   # Напечатать все книги Тургенева
   print(books['Тургенев'])
   # Напечать первую в списке книжку Тургенева
   print(books['Тургенев'][0])

   ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']
   Отцы и дети

Удаление элемента
```````````````````
**del**

.. code:: python

   del  phone_numbers['Иванов']

.. toctree::
   :maxdepth: 1
   :hidden:

   dict_methods
   dict_examples
