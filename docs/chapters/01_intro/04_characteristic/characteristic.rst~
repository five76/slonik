Характеристика языка Python
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Высокоуровневый, интерпретируемый, объектно-ориентированный, императивный, строго типизированный язык общего назначения, который имеет динамическую типизацию.

**Высокоуровневый**

Высокоуровневые языки разработаны для удобства использования и скорости написания программы. В них применяются определённые абстракции — структуры данных, набор вспомогательных функций и так далее. Это такие языки как Python, JS, PHP, Go

**Интерпретируемый**

Языки делятся на интерпретируемые(Python, JS, PHP, R, Ruby) и компилируемые (С, С++, Pascal).
В интерпретируемых программа выполняется специальной программой — интерпретатором. Если по ходу исполнения программы встречается ошибка, оно сразу же прекращается. Это позволяет Python-разработчику быстро обнаружить и устранить недочеты, но в то же время снижает производительность.


**Объектно-ориентированный**

Все языки также разделяются на процедурные, функциональные и объектно-ориентированные в зависимости от того, с помощью каких конструкций создаётся программа и как происходит её выполнение. Написанная на Python программа представляет собой совокупность объектов, каждому из которых присвоены определенный класс и место в иерархии. 

Python, являясь объектно-ориентированным языком, поддерживает и процедурное программирование это значит, что программу можно написать без единого класса.


**Императивный**

Языки программирования делятся на импертивные и декларативные. В **императивном** языке программист будет указывать последовательность команд для выполнения.

Декларативные язык описывают необходимый результат, который должен быть получен. Яркий пример декларативного языка это SQL (Stucted Query Language) или же структурированный язык запросов. В нём описывается конкретный результат выполнения программы а не последовательность команд. Декларативными языками еще называют HTML, CSS, SVG, VRML, SQL, lex/VACC.

**Динамическая типизация**

При динамической типизация в процессе выполнения команды переменная может содержать объекты различных типов. То есть переменная объявляется, но какой тип данных в ней будет содержаться не указывается, и в процессе выполнения программы в одной переменной может побывать как текст так и число, а может и булево значение.

Статическая типизация предполагает, что при задании переменной сразу указывается тип данных, который она может содержать.

**Строгая (сильная) типизация**

Сильная, или строгая типизация — это жёстко прописанные правила работы с каким-то типом 

Если переменная в строго типизированном языке числовая, значит, с ней можно выполнять только действия, предназначенные для чисел

Примеры языков с сильной типизацией: Python, Java, C# 

В языках с сильной типизацией не разрешаются выражения с несовместимыми типами и не выполняется неявное преобразование типов в ситуациях, когда нужно выполнять преобразование явно 

2. Например, сильно типизированный язык не позволит такие операции, как умножение числа на массив, и не выполнит неявного преобразования объекта к строке.

В языках с сильной типизацией при операциях, способных привести к потере или порче значения, возникает ошибка. 2. Благодаря этому сильно типизированные языки в меньшей степени подвержены багам.

**Общего назначения**

General-purpose Programming Language (GPL)
язык программирования, который позволяет решать широкий круг задач, от автоматизации рутины в операционных системах и системном администрировании до создания веб-страниц и запуска моделей машинного обучения.

**Python поддерживает мультипарадигменность**

Этот язык программирования поддерживает как процедурное, так и объектно-ориентированное программирование. Он также предоставляет возможности для функционального и императивного программирования.

**Императивное программирование на Python**

Императивное программирование — это стиль программирования, в котором код описывает последовательность шагов, которые компьютер должен выполнить для достижения результата. В Python этот стиль широко используется благодаря своей простоте и понятности. Императивное программирование фокусируется на изменении состояния программы через присваивание значений переменным и выполнение команд в определенном порядке

**Объектно-ориентированное программирование (ООП) на Python**

Объектно-ориентированное программирование (ООП) — это парадигма, в которой данные и методы, работающие с этими данными, объединяются в объекты. Python поддерживает ООП, что позволяет создавать сложные и масштабируемые приложения. ООП помогает организовать код в виде классов и объектов, что делает его более структурированным и легким для понимания.


**Функциональное программирование на Python**

Функциональное программирование — это парадигма, в которой основное внимание уделяется использованию функций и избеганию изменения состояния. Python поддерживает функциональное программирование через функции первого класса, лямбда-выражения и функции высшего порядка. Функциональное программирование делает акцент на использование чистых функций, которые не имеют побочных эффектов и всегда возвращают один и тот же результат для одних и тех же входных данных.

